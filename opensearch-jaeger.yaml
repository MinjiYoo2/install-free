apiVersion: v1
kind: ServiceAccount
metadata:
  name: jaeger-service-account
  namespace: istio-system
  labels:
    app: jaeger
---
apiVersion: v1
kind: Secret
metadata:
  name: jaeger-service-token
  namespace: istio-system
  annotations:
    kubernetes.io/service-account.name: jaeger-service-account
type: kubernetes.io/service-account-token   
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: jaeger-cert
  namespace: istio-system
spec:
  secretName: jaeger-secret
  commonName: "jaeger"
  privateKey:
    algorithm: RSA
    encoding: PKCS8
    size: 2048
  usages:
    - digital signature
    - key encipherment
    - server auth
    - client auth
  dnsNames:
    - "tmax-cloud"
    - "jaeger-query.istio-system.svc"
  issuerRef:
    kind: ClusterIssuer
    group: cert-manager.io
    name: tmaxcloud-issuer
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jaeger-istio-system
  labels:
    app: jaeger
rules:
  - apiGroups: ["extensions", "apps"]
    resources: ["deployments"]
    verbs: ["get", "list", "create", "patch", "update", "delete"]
  - apiGroups: [""]
    resources: ["pods", "services"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  - apiGroups: ["apps"]
    resources: ["daemonsets"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: jaeger-istio-system
subjects:
  - kind: ServiceAccount
    name: jaeger-service-account
    namespace: kuge-logging
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jaeger-istio-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-configuration
  namespace: istio-system
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
data:
  span-storage-type: opensearch
  collector: |
    es:
      server-urls: https://opensearch.kube-logging.svc:9200
      tls:
        enabled: true
        ca: /ca/cert/ca.crt
        cert: /ca/cert/tls.crt
        key: /ca/cert/tls.key
      username: admin
      password: admin
    collector:
      zipkin:
        host-port: 9411
  query: |
    es:
      server-urls: https://opensearch.kube-logging.svc:9200
      tls:
        enabled: true
        ca: /ca/cert/ca.crt
        cert: /ca/cert/tls.crt
        key: /ca/cert/tls.key
      username: admin
      password: admin
  agent: |
    reporter:
      grpc:
        host-port: "jaeger-collector.istio-system.svc:14250"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: istio-system
  name: jaeger-collector
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: collector
spec:
  selector:
    matchLabels:
      app: jaeger
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: jaeger
        app.kubernetes.io/name: jaeger
        app.kubernetes.io/component: collector
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "14268"
    spec:
      serviceAccountName: jaeger-service-account
      containers:
        - image: docker.io/jaegertracing/jaeger-collector:1.27.0
          name: jaeger-collector
          args: ["--config-file=/conf/collector.yaml"]
          ports:
            - containerPort: 14250
              protocol: TCP
            - containerPort: 14267
              protocol: TCP
            - containerPort: 14268
              protocol: TCP
            - containerPort: 9411
              protocol: TCP
            - containerPort: 14269
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: 14269
          volumeMounts:
            - name: jaeger-configuration-volume
              mountPath: /conf
            - name: jaeger-service-token
              mountPath: /var/run/secrets/kubernetes.io/serviceaccount
              readOnly: true
            - name: jaeger-certs
              mountPath: /ca/cert
              readOnly: true
          env:
            - name: SPAN_STORAGE_TYPE
              valueFrom:
                configMapKeyRef:
                  name: jaeger-configuration
                  key: span-storage-type
      volumes:
        - name: jaeger-service-token
          secret:
            defaultMode: 420
            secretName: jaeger-service-token
        - name: jaeger-certs
          secret:
            defaultMode: 420
            secretName: jaeger-secret
        - configMap:
            name: jaeger-configuration
            items:
              - key: collector
                path: collector.yaml
          name: jaeger-configuration-volume
---
apiVersion: v1
kind: Service
metadata:
  namespace: istio-system
  name: jaeger-collector
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: collector
spec:
  ports:
    - name: jaeger-collector-grpc
      port: 14250
      protocol: TCP
      targetPort: 14250
    - name: jaeger-collector-tchannel
      port: 14267
      protocol: TCP
      targetPort: 14267
    - name: jaeger-collector-http
      port: 14268
      protocol: TCP
      targetPort: 14268
    - name: jaeger-collector-zipkin
      port: 9411
      protocol: TCP
      targetPort: 9411
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: collector
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: zipkin
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: zipkin
spec:
  ports:
    - name: jaeger-collector-zipkin
      port: 9411
      protocol: TCP
      targetPort: 9411
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: collector
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-query
  namespace: istio-system
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: query
spec:
  selector:
    matchLabels:
      app: jaeger
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: jaeger
        app.kubernetes.io/name: jaeger
        app.kubernetes.io/component: query
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "16686"
    spec:
      containers:
      - image: docker.io/jaegertracing/jaeger-query:1.27.0
        name: jaeger-query
        args: ["--config-file=/conf/query.yaml"]
        ports:
        - containerPort: 16686
          protocol: TCP
        - containerPort: 16687
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 16687
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 4
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - name: jaeger-configuration-volume
          mountPath: /conf
        - name: jaeger-certs
          mountPath: /ca/cert
          readOnly: true
        env:
        - name: SPAN_STORAGE_TYPE
          valueFrom:
            configMapKeyRef:
              name: jaeger-configuration
              key: span-storage-type
        - name: QUERY_BASE_PATH
          value: /api/jaeger
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30 
      volumes:
        - name: jaeger-service-token
          secret:
            defaultMode: 420
            secretName: jaeger-service-token
        - name: jaeger-certs
          secret:
            defaultMode: 420
            secretName: jaeger-secret
        - configMap:
            name: jaeger-configuration
            items:
              - key: query
                path: query.yaml
          name: jaeger-configuration-volume
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-query
  namespace: istio-system
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: query
spec:
  ports:
  - name: jaeger-query
    port: 80
    protocol: TCP
    targetPort: 16686
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: query
  type: LoadBalancer
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: jaeger-agent
  namespace: istio-system
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: agent
spec:
  selector:
    matchLabels:
      app: jaeger
  template:
    metadata:
      labels:
        app: jaeger
        app.kubernetes.io/name: jaeger
        app.kubernetes.io/component: agent
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5778"
    spec:
      serviceAccountName: jaeger-service-account
      containers:
        - name: jaeger-agent
          image: docker.io/jaegertracing/jaeger-agent:1.27.0
          args: ["--config-file=/conf/agent.yaml"]
          volumeMounts:
            - name: jaeger-configuration-volume
              mountPath: /conf
            - name: jaeger-service-token
              mountPath: /var/run/secrets/kubernetes.io/serviceaccount
              readOnly: true
            - name: jaeger-certs
              mountPath: /ca/cert
              readOnly: true  
          ports:
            - containerPort: 5775
              protocol: UDP
            - containerPort: 6831
              protocol: UDP
            - containerPort: 6832
              protocol: UDP
            - containerPort: 5778
              protocol: TCP
            - containerPort: 14271
              protocol: TCP            
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      volumes:
        - name: jaeger-service-token
          secret:
            defaultMode: 420
            secretName: jaeger-service-token
        - name: jaeger-certs
          secret:
            defaultMode: 420
            secretName: jaeger-secret
        - configMap:
            name: jaeger-configuration
            items:
              - key: agent
                path: agent.yaml
          name: jaeger-configuration-volume
